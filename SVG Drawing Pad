<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Interactive SVG Drawing Tool</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Inter', sans-serif;
        }
        /* Make the SVG canvas responsive and prevent layout shift */
        .drawing-area-container {
            position: relative;
            width: 100%;
            padding-top: 66.66%; /* 3:2 Aspect Ratio */
            touch-action: none; /* Disable default touch actions like pinch-zoom */
        }
        #drawing-canvas {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            cursor: crosshair;
        }
    </style>
</head>
<body class="bg-gray-100 flex items-center justify-center min-h-screen">

    <div class="w-full max-w-4xl p-4 md:p-8">
        <div class="bg-white rounded-2xl shadow-lg p-6 md:p-8">
            <header class="mb-6 text-center">
                <h1 class="text-3xl md:text-4xl font-bold text-gray-800">SVG Drawing Pad</h1>
                <p class="text-gray-500 mt-2">Click and drag on the canvas below to draw.</p>
            </header>

            <!-- Controls for the drawing tool -->
            <div class="controls flex flex-wrap justify-center items-center gap-4 md:gap-6 mb-6 p-4 bg-gray-50 rounded-lg">
                <div class="flex items-center gap-2">
                    <label for="colorPicker" class="font-medium text-gray-700">Color:</label>
                    <input type="color" id="colorPicker" value="#1a202c" class="w-10 h-10 p-1 bg-white border border-gray-300 rounded-md cursor-pointer">
                </div>
                <div class="flex items-center gap-2">
                    <label for="lineWidth" class="font-medium text-gray-700">Width:</label>
                    <input type="range" id="lineWidth" min="1" max="50" value="5" class="w-32 cursor-pointer">
                    <span id="lineWidthValue" class="font-mono text-gray-700 w-6 text-center">5</span>
                </div>
                <button id="clearButton" class="px-5 py-2 bg-red-500 text-white font-semibold rounded-lg shadow-md hover:bg-red-600 focus:outline-none focus:ring-2 focus:ring-red-400 focus:ring-opacity-75 transition-colors">
                    Clear Canvas
                </button>
            </div>

            <!-- SVG Drawing Area -->
            <div class="drawing-area-container bg-gray-200 rounded-xl shadow-inner overflow-hidden">
                <svg id="drawing-canvas"></svg>
            </div>
        </div>
        <footer class="text-center mt-6">
            <p class="text-gray-400 text-sm">A simple drawing tool using SVG and JavaScript Mouse Events.</p>
        </footer>
    </div>

    <script>
        // Get references to all the necessary HTML elements
        const svgCanvas = document.getElementById('drawing-canvas');
        const colorPicker = document.getElementById('colorPicker');
        const lineWidthSlider = document.getElementById('lineWidth');
        const lineWidthValue = document.getElementById('lineWidthValue');
        const clearButton = document.getElementById('clearButton');

        // --- State Variables ---
        // isDrawing: A boolean to track if the mouse button is currently held down.
        // currentPath: A reference to the <path> element we are currently drawing.
        let isDrawing = false;
        let currentPath = null;
        
        // --- Event Listeners for Controls ---

        // Update the line width display when the slider is moved
        lineWidthSlider.addEventListener('input', (e) => {
            lineWidthValue.textContent = e.target.value;
        });

        // Clear all drawings from the canvas
        clearButton.addEventListener('click', () => {
            svgCanvas.innerHTML = '';
        });

        // --- Helper Function to get Mouse/Touch Coordinates ---
        // This function works for both mouse and touch events
        function getCoordinates(event) {
            const rect = svgCanvas.getBoundingClientRect();
            // Check if it's a touch event
            if (event.touches && event.touches.length > 0) {
                return {
                    x: event.touches[0].clientX - rect.left,
                    y: event.touches[0].clientY - rect.top
                };
            }
            // Otherwise, it's a mouse event
            return {
                x: event.clientX - rect.left,
                y: event.clientY - rect.top
            };
        }

        // --- Core Drawing Logic: Mouse and Touch Event Handlers ---

        function startDrawing(event) {
            event.preventDefault(); // Prevent default browser actions
            isDrawing = true;
            const { x, y } = getCoordinates(event);

            // Create a new <path> element for the new line
            currentPath = document.createElementNS('http://www.w3.org/2000/svg', 'path');
            
            // Set the path's visual properties from the controls
            currentPath.setAttribute('stroke', colorPicker.value);
            currentPath.setAttribute('stroke-width', lineWidthSlider.value);
            currentPath.setAttribute('stroke-linecap', 'round');
            currentPath.setAttribute('stroke-linejoin', 'round');
            currentPath.setAttribute('fill', 'none');
            
            // Start the path data with a "Move to" command at the starting coordinates
            currentPath.setAttribute('d', `M ${x} ${y}`);
            
            // Add the new path to the SVG canvas
            svgCanvas.appendChild(currentPath);
        }

        function draw(event) {
            if (!isDrawing) return; // Only draw if the mouse button is held down
            event.preventDefault();

            const { x, y } = getCoordinates(event);
            
            // Get the current path data
            let d = currentPath.getAttribute('d');
            
            // Append a "Line to" command to the path data
            d += ` L ${x} ${y}`;
            
            // Update the path data to draw the line in real-time
            currentPath.setAttribute('d', d);
        }

        function stopDrawing(event) {
            isDrawing = false;
            currentPath = null;
        }

        // Add event listeners for both mouse and touch events

        // Mouse events
        svgCanvas.addEventListener('mousedown', startDrawing);
        svgCanvas.addEventListener('mousemove', draw);
        window.addEventListener('mouseup', stopDrawing); // Listen on window to catch mouseup outside canvas
        
        // Touch events
        svgCanvas.addEventListener('touchstart', startDrawing);
        svgCanvas.addEventListener('touchmove', draw);
        window.addEventListener('touchend', stopDrawing);

    </script>
</body>
</html>
